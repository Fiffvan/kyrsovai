import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–æ–≥–æ–≤
from aiogram import types, Dispatcher, BaseMiddleware, Router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.dispatcher import router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.filters import Command  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
from aiogram_dialog import DialogManager, StartMode  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from buy.buy import buy  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
from handlers.table import register_handlers as register_tables_handlers  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
from database.database import get_db_connection, get_user_counts  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from keyboards.tables_menu import leagues_router as leagues_router, LeagueSG  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–≥–∏

router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
    last_name = message.from_user.last_name  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é

    try:
        conn = await get_db_connection()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        async with conn.cursor() as cursor:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
            await cursor.execute("SELECT subscription_active FROM users WHERE user_id = %s", (user_id,))
            user = await cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if not user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
                await cursor.execute(
                    "INSERT INTO users (user_id, username, first_name, last_name, subscription_active) "
                    "VALUES (%s, %s, %s, %s, %s)",
                    (user_id, username, first_name, last_name, 0)
                )
                await conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                subscription_active = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            else:
                subscription_active = user[0]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏

        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–¢–∞–±–ª–∏—Ü—ã")],
                [KeyboardButton(text="–ö—É–ø–∏—Ç—å")],
                [KeyboardButton(text="–ú–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
                [KeyboardButton(text="–ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription_active:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ /help", reply_markup=keyboard)
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å', —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=keyboard
            )
    except Exception as e:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
async def buy_command(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...")  # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏
    await buy(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–∞–±–ª–∏—Ü –∏ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–æ–ø-5 —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö –ª–∏–≥ –º–∏—Ä–∞ üá¨üáßüá™üá∏üá©üá™üáÆüáπüá´üá∑.\n"
                         "–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º: /start - –∞–∫—Ç–∏–≤–∞—Ü–∏—è/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
                         "/help –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, /buy –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
                         "/tables –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞–±–ª–∏—Ü—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tables
@router.message(Command("tables"))
async def tables_command(message: types.Message, dialog_manager: DialogManager):
    await dialog_manager.start(LeagueSG.select_league, mode=StartMode.RESET_STACK)  # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def stats_command(message: types.Message):
    try:
        total_users, subscribed_users = await get_user_counts()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await message.answer(
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed_users}"
        )
    except Exception as e:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")  # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.text in ["/start", "/buy"]:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ /buy, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                return await handler(event, data)

            user_id = event.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await is_subscription_active(user_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                await event.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
                return  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return await handler(event, data)  # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscription_active(user_id: int) -> bool:
    conn = await get_db_connection()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if conn is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        return False

    async with conn.cursor() as cursor:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        await cursor.execute("SELECT subscription_active FROM users WHERE user_id = %s", (user_id,))
        result = await cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        return result and result[0] == 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dp.message.register(stats_command, Command("stats"))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    dp.message.register(help_command, Command("help"))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    dp.message.register(tables_command, Command("tables"))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tables

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    dp.message.register(help_command, lambda message: message.text == "–ü–æ–º–æ—â—å")
    dp.message.register(buy_command, lambda message: message.text == "–ö—É–ø–∏—Ç—å")
    dp.message.register(help_command, lambda message: message.text == "–ü–æ–º–æ—â—å")
    dp.message.register(tables_command, lambda message: message.text == "–¢–∞–±–ª–∏—Ü—ã")

    register_tables_handlers(dp)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
